# 🌱 Satupersen Bot - CI/CD Pipeline
# Builds and deploys Docker image to GitHub Container Registry

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - "LICENSE"
  workflow_dispatch: # Allow manual triggers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Job - Run tests before building
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: postgres
          POSTGRES_DB: satupersen_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🗄️ Setup test database
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/satupersen_test
        run: |
          bunx prisma migrate deploy
          bunx prisma generate

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/satupersen_test
          NODE_ENV: test
        run: bun test

      - name: ✅ Test database connection
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/satupersen_test
        run: bun run src/utils/test-db-connection.ts

  # Security Scan Job
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Build and Push Job
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-{{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY.MM.DD'}}-{{sha}}
          labels: |
            org.opencontainers.image.title=Satupersen Bot
            org.opencontainers.image.description=AI-powered daily reflection Telegram bot for 1% daily growth
            org.opencontainers.image.vendor=Satupersen Team
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: 📋 Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  # Deployment Job (Optional - for production deployment)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup deployment context
        run: |
          echo "IMAGE_URI=${{ needs.build-and-push.outputs.image-uri }}" >> $GITHUB_ENV
          echo "IMAGE_DIGEST=${{ needs.build-and-push.outputs.image-digest }}" >> $GITHUB_ENV

      # Example deployment step - customize based on your deployment target
      - name: 🚀 Deploy to server
        run: |
          echo "🚀 Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.IMAGE_DIGEST }}"
          echo "📝 Add your deployment commands here"
          # Examples:
          # - SSH to server and update docker-compose.yml
          # - Update Kubernetes manifests
          # - Trigger deployment webhook
          # - Use cloud provider CLI tools

      - name: ✅ Deployment complete
        run: |
          echo "✅ Successfully deployed Satupersen Bot"
          echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ env.IMAGE_DIGEST }}"
          echo "🌐 Repository: ${{ github.repository }}"
          echo "📝 Commit: ${{ github.sha }}"

  # Notification Job
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: 📢 Success Notification
        if: needs.build-and-push.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "🐳 Docker image built and pushed"
          echo "🚀 Deployment completed"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: ❌ Failure Notification
        if: needs.build-and-push.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "🔍 Check the logs for details"
          # Add failure notification logic here
