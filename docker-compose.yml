# ðŸŒ± Satupersen Bot - Docker Compose Configuration
# Orchestrates bot service with PostgreSQL database

version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: satupersen-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: satupersen
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-satupersen_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - satupersen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Satupersen Bot Service
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: satupersen-bot
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-satupersen_secure_password}@db:5432/satupersen

      # Bot Configuration (from environment or .env file)
      BOT_TOKEN: ${BOT_TOKEN}

      # AI Configuration
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GOOGLE_AI_MODEL_NAME: ${GOOGLE_AI_MODEL_NAME:-gemini-1.5-flash}

      # Application Environment
      NODE_ENV: ${NODE_ENV:-production}

      # Optional: Logging and monitoring
      LOG_LEVEL: ${LOG_LEVEL:-info}

    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs

      # Mount environment file if exists
      - ./.env:/app/.env:ro

    networks:
      - satupersen-network

    # Resource limits for production stability
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

    # Health check for monitoring
    healthcheck:
      test: ["CMD", "bun", "run", "src/utils/test-db-connection.ts"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: satupersen-redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - satupersen-network
  #   command: redis-server --appendonly yes

  # Optional: Adminer for database management (development only)
  adminer:
    image: adminer:4
    container_name: satupersen-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - satupersen-network
    environment:
      ADMINER_DEFAULT_SERVER: db
    profiles:
      - development

volumes:
  postgres_data:
    name: satupersen_postgres_data
  # redis_data:
  #   name: satupersen_redis_data

networks:
  satupersen-network:
    name: satupersen-network
    driver: bridge
